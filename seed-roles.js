const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedRoles() {
  console.log('üå± Inserindo roles e permiss√µes padr√£o...')
  
  try {
    // 1. Criar roles padr√£o
    console.log('üè∑Ô∏è Criando roles...')
    
    const roles = [
      {
        id: 'admin_role',
        name: 'admin',
        description: 'Administrador com acesso total ao sistema'
      },
      {
        id: 'user_role',
        name: 'user',
        description: 'Usu√°rio padr√£o com acesso b√°sico'
      },
      {
        id: 'moderator_role',
        name: 'moderator',
        description: 'Moderador com permiss√µes intermedi√°rias'
      }
    ]
    
    for (const role of roles) {
      try {
        await prisma.role.upsert({
          where: { id: role.id },
          update: {
            name: role.name,
            description: role.description
          },
          create: role
        })
        console.log(`‚úÖ Role '${role.name}' criada/atualizada`)
      } catch (error) {
        console.error(`‚ùå Erro ao criar role '${role.name}':`, error.message)
      }
    }
    
    // 2. Criar permiss√µes padr√£o
    console.log('\nüîê Criando permiss√µes...')
    
    const permissions = [
      // Permiss√µes de usu√°rios
      { id: 'perm_users_read', name: 'users:read', resource: 'users', action: 'read', description: 'Visualizar usu√°rios' },
      { id: 'perm_users_create', name: 'users:create', resource: 'users', action: 'create', description: 'Criar usu√°rios' },
      { id: 'perm_users_update', name: 'users:update', resource: 'users', action: 'update', description: 'Atualizar usu√°rios' },
      { id: 'perm_users_delete', name: 'users:delete', resource: 'users', action: 'delete', description: 'Deletar usu√°rios' },
      
      // Permiss√µes de perfil
      { id: 'perm_profile_read', name: 'profile:read', resource: 'profile', action: 'read', description: 'Visualizar perfil' },
      { id: 'perm_profile_update', name: 'profile:update', resource: 'profile', action: 'update', description: 'Atualizar perfil' },
      
      // Permiss√µes de logs
      { id: 'perm_logs_read', name: 'logs:read', resource: 'logs', action: 'read', description: 'Visualizar logs' },
      
      // Permiss√µes administrativas
      { id: 'perm_admin_full', name: 'admin:full', resource: 'admin', action: 'full', description: 'Acesso administrativo completo' },
      { id: 'perm_roles_manage', name: 'roles:manage', resource: 'roles', action: 'manage', description: 'Gerenciar roles e permiss√µes' }
    ]
    
    for (const perm of permissions) {
      try {
        await prisma.permission.upsert({
          where: { id: perm.id },
          update: {
            name: perm.name,
            resource: perm.resource,
            action: perm.action,
            description: perm.description
          },
          create: perm
        })
        console.log(`‚úÖ Permiss√£o '${perm.name}' criada/atualizada`)
      } catch (error) {
        console.error(`‚ùå Erro ao criar permiss√£o '${perm.name}':`, error.message)
      }
    }
    
    // 3. Associar permiss√µes aos roles
    console.log('\nüîó Associando permiss√µes aos roles...')
    
    const rolePermissions = [
      // Admin tem todas as permiss√µes
      {
        roleId: 'admin_role',
        permissions: [
          'perm_users_read', 'perm_users_create', 'perm_users_update', 'perm_users_delete',
          'perm_profile_read', 'perm_profile_update',
          'perm_logs_read',
          'perm_admin_full', 'perm_roles_manage'
        ]
      },
      
      // User tem permiss√µes b√°sicas
      {
        roleId: 'user_role',
        permissions: ['perm_profile_read', 'perm_profile_update']
      },
      
      // Moderator tem permiss√µes intermedi√°rias
      {
        roleId: 'moderator_role',
        permissions: ['perm_users_read', 'perm_profile_read', 'perm_profile_update', 'perm_logs_read']
      }
    ]
    
    for (const rp of rolePermissions) {
      for (const permId of rp.permissions) {
        try {
          await prisma.rolePermission.upsert({
            where: {
              roleId_permissionId: {
                roleId: rp.roleId,
                permissionId: permId
              }
            },
            update: {},
            create: {
              roleId: rp.roleId,
              permissionId: permId
            }
          })
        } catch (error) {
          console.log(`‚ÑπÔ∏è Associa√ß√£o ${rp.roleId} -> ${permId} j√° existe`)
        }
      }
    }
    
    console.log('‚úÖ Associa√ß√µes de permiss√µes criadas')
    
    // 4. Atualizar usu√°rios para usar os novos roleIds
    console.log('\nüë• Atualizando usu√°rios...')
    
    // Ler backup se existir
    const fs = require('fs')
    let userData = []
    
    try {
      const backupContent = fs.readFileSync('backup-users-roles.json', 'utf8')
      const backupData = JSON.parse(backupContent)
      userData = backupData.users
      console.log(`üìã Usando backup: ${userData.length} usu√°rios`)
    } catch (error) {
      console.log('‚ö†Ô∏è Backup n√£o encontrado, todos os usu√°rios receber√£o role user_role')
    }
    
    const roleMapping = {
      'admin': 'admin_role',
      'ADMIN': 'admin_role',
      'user': 'user_role',
      'USER': 'user_role',
      'moderator': 'moderator_role',
      'MODERATOR': 'moderator_role'
    }
    
    if (userData.length > 0) {
      // Usar dados do backup
      for (const user of userData) {
        try {
          const oldRole = user.role || 'user'
          const newRoleId = roleMapping[oldRole] || 'user_role'
          
          await prisma.user.update({
            where: { id: user.id },
            data: { roleId: newRoleId }
          })
          
          console.log(`‚úÖ ${user.email}: ${oldRole} -> ${newRoleId}`)
        } catch (error) {
          console.error(`‚ùå Erro ao atualizar ${user.email}:`, error.message)
        }
      }
    } else {
      // Atualizar todos os usu√°rios para user_role
      await prisma.user.updateMany({
        data: { roleId: 'user_role' }
      })
      console.log('‚úÖ Todos os usu√°rios atualizados para user_role')
    }
    
    // 5. Estat√≠sticas finais
    console.log('\nüìä Estat√≠sticas finais:')
    
    const roleStats = await prisma.user.groupBy({
      by: ['roleId'],
      _count: { id: true }
    })
    
    console.log('Distribui√ß√£o de roles:')
    for (const stat of roleStats) {
      const role = await prisma.role.findUnique({
        where: { id: stat.roleId },
        select: { name: true }
      })
      console.log(`  ${role?.name || stat.roleId}: ${stat._count.id} usu√°rios`)
    }
    
    const totalPermissions = await prisma.permission.count()
    const totalRolePermissions = await prisma.rolePermission.count()
    
    console.log(`\nüìà Resumo:`)
    console.log(`- Roles criados: ${roles.length}`)
    console.log(`- Permiss√µes criadas: ${totalPermissions}`)
    console.log(`- Associa√ß√µes role-permiss√£o: ${totalRolePermissions}`)
    
    console.log('\nüéâ Sistema de roles e permiss√µes configurado com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro durante o seed:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar o seed
seedRoles().catch(console.error)